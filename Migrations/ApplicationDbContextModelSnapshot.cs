// <auto-generated />
using System;
using BankApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BankApp.Models.CreateClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassportNum")
                        .HasColumnType("int");

                    b.Property<string>("PassportSerier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreateClients");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BelarusBank"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BelinvestBank"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tehnobank"
                        });
                });

            modelBuilder.Entity("BankApp.Models.Entity.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Salary")
                        .HasColumnType("bit");

                    b.Property<bool?>("SalaryDay")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double?>("PayForProfession")
                        .HasColumnType("float");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BIK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("TYP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YrAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YrName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BankApp.Models.Entity.InstallmentPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinusMoney")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NowMoney")
                        .HasColumnType("float");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("Installments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("InstallmentPlan");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("BankApp.Models.Entity.MoneyStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("InstallmentId")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MoneyStatistics");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SalaryModel.ClientSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ClientSalaries");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SalaryModel.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Salarys");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SalaryModel.SalaryProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Simular")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("SalaryProjects");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Specialist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Specialists");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SpecStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClientSalary")
                        .HasColumnType("int");

                    b.Property<int?>("MoneyRequest")
                        .HasColumnType("int");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SpecStatistics");
                });

            modelBuilder.Entity("BankApp.Models.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentificationNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("PassportNum")
                        .HasColumnType("int");

                    b.Property<string>("PassportSerier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BankApp.Models.InstallmentOrCreditModel.CreateInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<int?>("MoneyProcent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InstallmentCreation");
                });

            modelBuilder.Entity("BankApp.ViewModels.UserCreation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassportNum")
                        .HasColumnType("int");

                    b.Property<string>("PassportSerier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bankId")
                        .HasColumnType("int");

                    b.Property<int>("clId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserCreations");
                });

            modelBuilder.Entity("BankClient", b =>
                {
                    b.Property<int>("BanksId")
                        .HasColumnType("int");

                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.HasKey("BanksId", "ClientsId");

                    b.HasIndex("ClientsId");

                    b.ToTable("ClientsBanks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BankApp.Models.Entity.Credit", b =>
                {
                    b.HasBaseType("BankApp.Models.Entity.InstallmentPlan");

                    b.Property<int?>("BankId1")
                        .HasColumnType("int");

                    b.Property<double>("MonthProcent")
                        .HasColumnType("float");

                    b.HasIndex("BankId1");

                    b.HasDiscriminator().HasValue("Credit");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Admin", b =>
                {
                    b.HasOne("BankApp.Models.Entity.User", "User")
                        .WithMany("Admins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Admins_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankApp.Models.Entity.BankAccount", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Banks");

                    b.HasOne("BankApp.Models.Entity.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Clients");

                    b.Navigation("Bank");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Client", b =>
                {
                    b.HasOne("BankApp.Models.Entity.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Clients_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Company", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("Companys")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Companys_Banks");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankApp.Models.Entity.InstallmentPlan", b =>
                {
                    b.HasOne("BankApp.Models.Entity.BankAccount", "BankAccount")
                        .WithMany("Installments")
                        .HasForeignKey("AccId")
                        .IsRequired()
                        .HasConstraintName("FK_Intallments_Accounts");

                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("Installments")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Installments_Banks");

                    b.HasOne("BankApp.Models.Entity.Client", "Client")
                        .WithMany("Installments")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Intallments_Clients");

                    b.Navigation("Bank");

                    b.Navigation("BankAccount");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Manager", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("Managers")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Managers_Banks");

                    b.HasOne("BankApp.Models.Entity.User", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Managers_Users");

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Operator", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("Operators")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Operators_Banks");

                    b.HasOne("BankApp.Models.Entity.User", "User")
                        .WithMany("Operators")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Operators_Users");

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SalaryModel.ClientSalary", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Company", "Company")
                        .WithMany("ClientSalaries")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientSalarys_Companys");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SalaryModel.Salary", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", null)
                        .WithMany("Salarys")
                        .HasForeignKey("BankId");

                    b.HasOne("BankApp.Models.Entity.Company", "Company")
                        .WithMany("Salarys")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Salarys_Companys");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BankApp.Models.Entity.SalaryModel.SalaryProject", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("SalaryProjects")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_SalaryProject_Banks");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Specialist", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", "Bank")
                        .WithMany("Specialists")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Specialists_Banks");

                    b.HasOne("BankApp.Models.Entity.Company", "Company")
                        .WithMany("Specialists")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Specialists_Companys");

                    b.HasOne("BankApp.Models.Entity.User", "User")
                        .WithMany("Specialists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Specialists_Users");

                    b.Navigation("Bank");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankClient", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", null)
                        .WithMany()
                        .HasForeignKey("BanksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Models.Entity.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BankApp.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BankApp.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BankApp.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankApp.Models.Entity.Credit", b =>
                {
                    b.HasOne("BankApp.Models.Entity.Bank", null)
                        .WithMany("Credits")
                        .HasForeignKey("BankId1");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Bank", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Companys");

                    b.Navigation("Credits");

                    b.Navigation("Installments");

                    b.Navigation("Managers");

                    b.Navigation("Operators");

                    b.Navigation("SalaryProjects");

                    b.Navigation("Salarys");

                    b.Navigation("Specialists");
                });

            modelBuilder.Entity("BankApp.Models.Entity.BankAccount", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Client", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Installments");
                });

            modelBuilder.Entity("BankApp.Models.Entity.Company", b =>
                {
                    b.Navigation("ClientSalaries");

                    b.Navigation("Salarys");

                    b.Navigation("Specialists");
                });

            modelBuilder.Entity("BankApp.Models.Entity.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Clients");

                    b.Navigation("Managers");

                    b.Navigation("Operators");

                    b.Navigation("Specialists");
                });
#pragma warning restore 612, 618
        }
    }
}
